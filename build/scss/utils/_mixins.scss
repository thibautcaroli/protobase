
///////////////////////////////
////////// LAYOUT /////////////
///////////////////////////////

// MAX HEIGHT

@mixin maxH($height) {
  max-height: $height;
  overflow: hidden;
}

// FLEX
//
// $positions: justify-content align-items
// If only one $position, will be used for the two properties

@mixin flex($positions: null null, $column: false) {
	display: flex;
	
	$positions: unpack-duo($positions);

	$flex-positions: (
		justify-content: nth($positions, 1),
		align-items: nth($positions, 2)
	);

	@each $flex-position, $position in $flex-positions {
		@if ($position != null) {
			#{$flex-position}: $position;
		}
	}

	@if ($column) {
		flex-direction: column;
	}
}

// Fill WRAPPERS
//
// $mode is 'parent' or 'viewport'
// $fullH is for fill width AND height

@mixin fill($mode, $fullH: false) {
	@if ($mode == 'viewport') {
		position: relative;
		width: 100vw;
		@if ($fullH) {
			height: 100vh;
		}
	}
	@if ($mode == 'parent') {
		position: absolute;
		width: 100%;
		@if ($fullH) {
			height: 100%;
		}
	}
}


// CENTER ME !

@mixin centered($direction: 'horizontal') {
	@if ($direction == 'horizontal') {
		left: 50%;
		transform: translateX(-50%)
	}
	@else {
		top: 50%;
		transform: translateY(-50%)
	}
	
}


///////////////////////////////
/////////// TYPO //////////////
///////////////////////////////

// RESPONSIVE FONT

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include make-font-size($fs-font-size);
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include make-font-size($fs-font-size);
      }
    }
  }
}

@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == "list" {
    font-size: nth($fs-font-size, 1);
    @if (length($fs-font-size) > 1) {
      line-height: nth($fs-font-size, 2);
    }
  }
  @else {
    font-size: $fs-font-size;
  }
}

// FONT-SMOOTHING 

@mixin font-smoothing($auto: true) {
	@if $auto == false {
		-webkit-font-smoothing: auto;
		-moz-osx-font-smoothing: auto;
	}
	@else {
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
}

// MAKE WEBFONT

@mixin add-webfont($name, $path, $slug, $font-weight: 400) {

	@font-face {
	    font-family: $name;
	    src: url('../fonts/'+$path+'/'+$slug+'.eot');
	    src: url('../fonts/'+$path+'/'+$slug+'.eot?#iefix') format('embedded-opentype'),
	         url('../fonts/'+$path+'/'+$slug+'.woff2') format('woff2'),
	         url('../fonts/'+$path+'/'+$slug+'.ttf') format('truetype'),
	         url('../fonts/'+$path+'/'+$slug+'.woff') format('woff'),
	         url('../fonts/'+$path+'/'+$slug+'.svg') format('svg');
	    font-weight: $font-weight;
	    font-style: normal;
	}

}


///////////////////////////////
////////// ELEMENT ////////////
///////////////////////////////

// Make background with :before or :after pseudo-selectors
// Parent element should be positioned

@mixin pseudo_bg($color: #000, $opacity: 1) {
	content: '';
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: rgba($color, $opacity);
}